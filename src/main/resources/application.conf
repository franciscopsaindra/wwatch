akka {

  log-config-on-start = off

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  actor {
	debug {
		receive = off
		lifecycle = on
	  }
  }

  http {
    server {
      remote-address-header = on
      max-connections = 4096
      backlog = 1000
      linger-timeout = 1 min
      
      socket-options {
      	so-reuse-address = yes
      }
    }
    
    client {
    	connecting-timeout = 1 s
    }
    

    host-connection-pool {
	    # The maximum number of parallel connections that a connection pool to a
	    # single host endpoint is allowed to establish. Must be greater than zero
	    
	    max-connections = 4096
	    
	    # The maximum number of open requests accepted into the pool across all
	    # materializations of any of its client flows.
	    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
	    # Note that with N concurrent materializations the max number of open request in the pool
	    # will never exceed N * max-connections * pipelining-limit.
	    # Must be a power of 2 and > 0!
	    
	    max-open-requests = 4096
	    
	    # The minimum number of parallel connections that a pool should keep alive ("hot").
	    # If the number of connections is falling below the given threshold, new ones are being spawned.
	    # You can use this setting to build a hot pool of "always on" connections.
	    # Default is 0, meaning there might be no active connection at given moment.
	    # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
	    
	    min-connections = 0
	
	    # The maximum number of times failed requests are attempted again,
	    # (if the request can be safely retried) before giving up and returning an error.
	    # Set to zero to completely disable request retries.
	   
	    max-retries = 0
	    
	    pool-implementation = new
	    
	    # The "new" pool implementation will fail a connection early and clear the slot if a response entity was not
	    # subscribed during the given time period after the response was dispatched. In busy systems the timeout might be
	    # too tight if a response is not picked up quick enough after it was dispatched by the pool.
    	response-entity-subscription-timeout = 1.second
  	}
  }
}


wwatch {

	content {
		# Absolute path of the content directory
		directory = /code/yaasws/wwatch/content
	}
	
	server {
		# Listening ports
		redirectorListenPort = 8800
		instrumentationListenPort = 8801
	}
	
	defaultUserData {
		clientId = "<unknown>"
		policy = 3 // 1: PASS, 2: UNCONDITIONAL, 3: WEAK
		inline = true
		pageName = "adviser.html"
	}
	
	userDataMgr {
		# UserInfo client timeout (ask to Actor)
		askTimeoutMillis = 10000
		
		# Implementation to use. Allowed values are "radius" and "restClient"
		implementation = radius
	}
	
	radiusUserDataMgr {
		listenAddress = 0.0.0.0
		listenPort = 1813
		secret = secret
		timeoutSeconds = 100
	}
	
	restUserDataMgr {
		# Milliseconds of ipAddress to UserInfo cache time
		userCacheTimeMillis = 10000
		
		# Will verify the above every
		clientCacheEvictorPeriodMillis = 500

	
		# userInfo URL. Anything not starting with "http" will 
		userDataURL = "http://127.0.0.1:11111/userData?ipAddress=$ipAddress"
		
		# Whether to start the mokeup userInfo server, which will listen in http://127.0.0.1:11111
		mokeupUserDataServer = true
	}
	
	testWeb {
		# Whether to start the mokeup web server
		enable = true
		
		# Simulated web will listen on this port
		listenPort = 11112
		
		# Delay for answering in milliseconds
		answerDelayMillis = 500
	}
	
	proxy {
		enabled = false
		userName = frodriguezg
		password = _Mimosos88
		hostName = proxy.indra.es
		port = 8080
	}
}


# DO NOT REMOVE THIS LINE
include "wwatch.conf"
